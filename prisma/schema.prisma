// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  isAdmin   Boolean  @default(false)
}

model Product {
  id          String             @id @default(cuid())
  name        String
  description String             @db.Text
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  variations  ProductVariation[]
  categories  Category[]         @relation("ProductToCategory")
}

model ProductVariation {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  size      String // e.g., "S", "M", "L", "XL"
  color     String // e.g., "Red", "Blue", "Green"
  price     Float
  stock     Int
  images    ProductImage[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, size, color])
}

model ProductImage {
  id                 String           @id @default(cuid())
  url                String
  productVariationId String
  productVariation   ProductVariation @relation(fields: [productVariationId], references: [id], onDelete: Cascade)
  createdAt          DateTime         @default(now())
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[] @relation("ProductToCategory")
  createdAt DateTime  @default(now())
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  total       Float
  status      String // e.g., "PENDING", "SHIPPED", "DELIVERED"
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  couponId    String?
  coupon      Coupon?     @relation(fields: [couponId], references: [id])
}

model OrderItem {
  id                 String   @id @default(cuid())
  orderId            String
  order              Order    @relation(fields: [orderId], references: [id])
  productVariationId String
  quantity           Int
  price              Float
  createdAt          DateTime @default(now())
}

model Coupon {
  id          String   @id @default(cuid())
  code        String   @unique
  discount    Float // Can be a percentage or a fixed amount
  type        String // "PERCENTAGE" or "FIXED"
  expiresAt   DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  orders      Order[]
}